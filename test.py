import unittest
import aes


# Cipher example rounds from Appendix B (pp. 33) of FIPS 197
rounds = [
    {
        "start_of_round": [[0x19, 0xa0, 0x9a, 0xe9],
                           [0x3d, 0xf4, 0xc6, 0xf8],
                           [0xe3, 0xe2, 0x8d, 0x48],
                           [0xbe, 0x2b, 0x2a, 0x08]],
        "after_sub_bytes": [[0xd4, 0xe0, 0xb8, 0x1e],
                            [0x27, 0xbf, 0xb4, 0x41],
                            [0x11, 0x98, 0x5d, 0x52],
                            [0xae, 0xf1, 0xe5, 0x30]],
        "after_shift_rows": [[0xd4, 0xe0, 0xb8, 0x1e],
                             [0xbf, 0xb4, 0x41, 0x27],
                             [0x5d, 0x52, 0x11, 0x98],
                             [0x30, 0xae, 0xf1, 0xe5]],
        "after_mix_columns": [[0x04, 0xe0, 0x48, 0x28],
                              [0x66, 0xcb, 0xf8, 0x06],
                              [0x81, 0x19, 0xd3, 0x26],
                              [0xe5, 0x9a, 0x7a, 0x4c]],
        "round_key_value": [[0xa0, 0x88, 0x23, 0x2a],
                            [0xfa, 0x54, 0xa3, 0x6c],
                            [0xfe, 0x2c, 0x39, 0x76],
                            [0x17, 0xb1, 0x39, 0x05]],
    },
    {
        "start_of_round": [[0xa4, 0x68, 0x6b, 0x02],
                           [0x9c, 0x9f, 0x5b, 0x6a],
                           [0x7f, 0x35, 0xea, 0x50],
                           [0xf2, 0x2b, 0x43, 0x49]],
        "after_sub_bytes": [[0x49, 0x45, 0x7f, 0x77],
                            [0xde, 0xdb, 0x39, 0x02],
                            [0xd2, 0x96, 0x87, 0x53],
                            [0x89, 0xf1, 0x1a, 0x3b]],
        "after_shift_rows": [[0x49, 0x45, 0x7f, 0x77],
                             [0xdb, 0x39, 0x02, 0xde],
                             [0x87, 0x53, 0xd2, 0x96],
                             [0x3b, 0x89, 0xf1, 0x1a]],
        "after_mix_columns": [[0x58, 0x1b, 0xdb, 0x1b],
                              [0x4d, 0x4b, 0xe7, 0x6b],
                              [0xca, 0x5a, 0xca, 0xb0],
                              [0xf1, 0xac, 0xa8, 0xe5]],
        "round_key_value": [[0xf2, 0x7a, 0x59, 0x73],
                            [0xc2, 0x96, 0x35, 0x59],
                            [0x95, 0xb9, 0x80, 0xf6],
                            [0xf2, 0x43, 0x7a, 0x7f]],
    },
    {
        "start_of_round": [[0xaa, 0x61, 0x82, 0x68],
                           [0x8f, 0xdd, 0xd2, 0x32],
                           [0x5f, 0xe3, 0x4a, 0x46],
                           [0x03, 0xef, 0xd2, 0x9a]],
        "after_sub_bytes": [[0xac, 0xef, 0x13, 0x45],
                            [0x73, 0xc1, 0xb5, 0x23],
                            [0xcf, 0x11, 0xd6, 0x5a],
                            [0x7b, 0xdf, 0xb5, 0xb8]],
        "after_shift_rows": [[0xac, 0xef, 0x13, 0x45],
                             [0xc1, 0xb5, 0x23, 0x73],
                             [0xd6, 0x5a, 0xcf, 0x11],
                             [0xb8, 0x7b, 0xdf, 0xb5]],
        "after_mix_columns": [[0x75, 0x20, 0x53, 0xbb],
                              [0xec, 0x0b, 0xc0, 0x25],
                              [0x09, 0x63, 0xcf, 0xd0],
                              [0x93, 0x33, 0x7c, 0xdc]],
        "round_key_value": [[0x3d, 0x47, 0x1e, 0x6d],
                            [0x80, 0x16, 0x23, 0x7a],
                            [0x47, 0xfe, 0x7e, 0x88],
                            [0x7d, 0x3e, 0x44, 0x3b]],
    },
    {
        "start_of_round": [[0x48, 0x67, 0x4d, 0xd6],
                           [0x6c, 0x1d, 0xe3, 0x5f],
                           [0x4e, 0x9d, 0xb1, 0x58],
                           [0xee, 0x0d, 0x38, 0xe7]],
        "after_sub_bytes": [[0x52, 0x85, 0xe3, 0xf6],
                            [0x50, 0xa4, 0x11, 0xcf],
                            [0x2f, 0x5e, 0xc8, 0x6a],
                            [0x28, 0xd7, 0x07, 0x94]],
        "after_shift_rows": [[0x52, 0x85, 0xe3, 0xf6],
                             [0xa4, 0x11, 0xcf, 0x50],
                             [0xc8, 0x6a, 0x2f, 0x5e],
                             [0x94, 0x28, 0xd7, 0x07]],
        "after_mix_columns": [[0x0f, 0x60, 0x6f, 0x5e],
                              [0xd6, 0x31, 0xc0, 0xb3],
                              [0xda, 0x38, 0x10, 0x13],
                              [0xa9, 0xbf, 0x6b, 0x01]],
        "round_key_value": [[0xef, 0xa8, 0xb6, 0xdb],
                            [0x44, 0x52, 0x71, 0x0b],
                            [0xa5, 0x5b, 0x25, 0xad],
                            [0x41, 0x7f, 0x3b, 0x00]],
    },
    {
        "start_of_round": [[0xe0, 0xc8, 0xd9, 0x85],
                           [0x92, 0x63, 0xb1, 0xb8],
                           [0x7f, 0x63, 0x35, 0xbe],
                           [0xe8, 0xc0, 0x50, 0x01]],
        "after_sub_bytes": [[0xe1, 0xe8, 0x35, 0x97],
                            [0x4f, 0xfb, 0xc8, 0x6c],
                            [0xd2, 0xfb, 0x96, 0xae],
                            [0x9b, 0xba, 0x53, 0x7c]],
        "after_shift_rows": [[0xe1, 0xe8, 0x35, 0x97],
                             [0xfb, 0xc8, 0x6c, 0x4f],
                             [0x96, 0xae, 0xd2, 0xfb],
                             [0x7c, 0x9b, 0xba, 0x53]],
        "after_mix_columns": [[0x25, 0xbd, 0xb6, 0x4c],
                              [0xd1, 0x11, 0x3a, 0x4c],
                              [0xa9, 0xd1, 0x33, 0xc0],
                              [0xad, 0x68, 0x8e, 0xb0]],
        "round_key_value": [[0xd4, 0x7c, 0xca, 0x11],
                            [0xd1, 0x83, 0xf2, 0xf9],
                            [0xc6, 0x9d, 0xb8, 0x15],
                            [0xf8, 0x87, 0xbc, 0xbc]],
    },
    {
        "start_of_round": [[0xf1, 0xc1, 0x7c, 0x5d],
                           [0x00, 0x92, 0xc8, 0xb5],
                           [0x6f, 0x4c, 0x8b, 0xd5],
                           [0x55, 0xef, 0x32, 0x0c]],
        "after_sub_bytes": [[0xa1, 0x78, 0x10, 0x4c],
                            [0x63, 0x4f, 0xe8, 0xd5],
                            [0xa8, 0x29, 0x3d, 0x03],
                            [0xfc, 0xdf, 0x23, 0xfe]],
        "after_shift_rows": [[0xa1, 0x78, 0x10, 0x4c],
                             [0x4f, 0xe8, 0xd5, 0x63],
                             [0x3d, 0x03, 0xa8, 0x29],
                             [0xfe, 0xfc, 0xdf, 0x23]],
        "after_mix_columns": [[0x4b, 0x2c, 0x33, 0x37],
                              [0x86, 0x4a, 0x9d, 0xd2],
                              [0x8d, 0x89, 0xf4, 0x18],
                              [0x6d, 0x80, 0xe8, 0xd8]],
        "round_key_value": [[0x6d, 0x11, 0xdb, 0xca],
                            [0x88, 0x0b, 0xf9, 0x00],
                            [0xa3, 0x3e, 0x86, 0x93],
                            [0x7a, 0xfd, 0x41, 0xfd]],
    },
    {
        "start_of_round": [[0x26, 0x3d, 0xe8, 0xfd],
                           [0x0e, 0x41, 0x64, 0xd2],
                           [0x2e, 0xb7, 0x72, 0x8b],
                           [0x17, 0x7d, 0xa9, 0x25]],
        "after_sub_bytes": [[0xf7, 0x27, 0x9b, 0x54],
                            [0xab, 0x83, 0x43, 0xb5],
                            [0x31, 0xa9, 0x40, 0x3d],
                            [0xf0, 0xff, 0xd3, 0x3f]],
        "after_shift_rows": [[0xf7, 0x27, 0x9b, 0x54],
                             [0x83, 0x43, 0xb5, 0xab],
                             [0x40, 0x3d, 0x31, 0xa9],
                             [0x3f, 0xf0, 0xff, 0xd3]],
        "after_mix_columns": [[0x14, 0x46, 0x27, 0x34],
                              [0x15, 0x16, 0x46, 0x2a],
                              [0xb5, 0x15, 0x56, 0xd8],
                              [0xbf, 0xec, 0xd7, 0x43]],
        "round_key_value": [[0x4e, 0x5f, 0x84, 0x4e],
                            [0x54, 0x5f, 0xa6, 0xa6],
                            [0xf7, 0xc9, 0x4f, 0xdc],
                            [0x0e, 0xf3, 0xb2, 0x4f]],
    },
    {
        "start_of_round": [[0x5a, 0x19, 0xa3, 0x7a],
                           [0x41, 0x49, 0xe0, 0x8c],
                           [0x42, 0xdc, 0x19, 0x04],
                           [0xb1, 0x1f, 0x65, 0x0c]],
        "after_sub_bytes": [[0xbe, 0xd4, 0x0a, 0xda],
                            [0x83, 0x3b, 0xe1, 0x64],
                            [0x2c, 0x86, 0xd4, 0xf2],
                            [0xc8, 0xc0, 0x4d, 0xfe]],
        "after_shift_rows": [[0xbe, 0xd4, 0x0a, 0xda],
                             [0x3b, 0xe1, 0x64, 0x83],
                             [0xd4, 0xf2, 0x2c, 0x86],
                             [0xfe, 0xc8, 0xc0, 0x4d]],
        "after_mix_columns": [[0x00, 0xb1, 0x54, 0xfa],
                              [0x51, 0xc8, 0x76, 0x1b],
                              [0x2f, 0x89, 0x6d, 0x99],
                              [0xd1, 0xff, 0xcd, 0xea]],
        "round_key_value": [[0xea, 0xb5, 0x31, 0x7f],
                            [0xd2, 0x8d, 0x2b, 0x8d],
                            [0x73, 0xba, 0xf5, 0x29],
                            [0x21, 0xd2, 0x60, 0x2f]],
    },
    {
        "start_of_round": [[0xea, 0x04, 0x65, 0x85],
                           [0x83, 0x45, 0x5d, 0x96],
                           [0x5c, 0x33, 0x98, 0xb0],
                           [0xf0, 0x2d, 0xad, 0xc5]],
        "after_sub_bytes": [[0x87, 0xf2, 0x4d, 0x97],
                            [0xec, 0x6e, 0x4c, 0x90],
                            [0x4a, 0xc3, 0x46, 0xe7],
                            [0x8c, 0xd8, 0x95, 0xa6]],
        "after_shift_rows": [[0x87, 0xf2, 0x4d, 0x97],
                             [0x6e, 0x4c, 0x90, 0xec],
                             [0x46, 0xe7, 0x4a, 0xc3],
                             [0xa6, 0x8c, 0xd8, 0x95]],
        "after_mix_columns": [[0x47, 0x40, 0xa3, 0x4c],
                              [0x37, 0xd4, 0x70, 0x9f],
                              [0x94, 0xe4, 0x3a, 0x42],
                              [0xed, 0xa5, 0xa6, 0xbc]],
        "round_key_value": [[0xac, 0x19, 0x28, 0x57],
                            [0x77, 0xfa, 0xd1, 0x5c],
                            [0x66, 0xdc, 0x29, 0x00],
                            [0xf3, 0x21, 0x41, 0x6e]],
    }
]


class TestCipher(unittest.TestCase):
    """ Test cases from pp. 33 of FIPS 197 """

    def test_rounds(self):
        for round in rounds:
            state = round["start_of_round"]

            aes.sub_bytes(state)
            self.assertEqual(state, round["after_sub_bytes"])

            aes.shift_rows(state)
            self.assertEqual(state, round["after_shift_rows"])

            aes.mix_columns(state)
            self.assertEqual(state, round["after_mix_columns"])

    def test_inverses(self):
        for round in rounds:
            state = round["start_of_round"]
            aes.sub_bytes(state)
            aes.inv_sub_bytes(state)
            self.assertEqual(state, round["start_of_round"])

            state = round["after_sub_bytes"]
            aes.shift_rows(state)
            aes.inv_shift_rows(state)
            self.assertEqual(state, round["after_sub_bytes"])

            state = round["after_shift_rows"]
            aes.mix_columns(state)
            aes.inv_mix_columns(state)
            self.assertEqual(state, round["after_shift_rows"])

    def test_encrypt(self):
        ciphertext = aes.encrypt(
            "00112233445566778899aabbccddeeff", "000102030405060708090a0b0c0d0e0f")
        self.assertEqual(ciphertext, "69c4e0d86a7b0430d8cdb78070b4c55a")

        ciphertext = aes.encrypt("00112233445566778899aabbccddeeff",
                                 "000102030405060708090a0b0c0d0e0f1011121314151617")
        self.assertEqual(ciphertext, "dda97ca4864cdfe06eaf70a0ec0d7191")

        ciphertext = aes.encrypt("00112233445566778899aabbccddeeff",
                                 "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f")
        self.assertEqual(ciphertext, "8ea2b7ca516745bfeafc49904b496089")

    def test_decrypt(self):
        plaintext = aes.decrypt(
            "69c4e0d86a7b0430d8cdb78070b4c55a", "000102030405060708090a0b0c0d0e0f")
        self.assertEqual(plaintext, "00112233445566778899aabbccddeeff")

        plaintext = aes.decrypt("dda97ca4864cdfe06eaf70a0ec0d7191",
                                "000102030405060708090a0b0c0d0e0f1011121314151617")
        self.assertEqual(plaintext, "00112233445566778899aabbccddeeff")

        plaintext = aes.decrypt("8ea2b7ca516745bfeafc49904b496089",
                                "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f")
        self.assertEqual(plaintext, "00112233445566778899aabbccddeeff")


class TestArithmetic(unittest.TestCase):
    """ Test cases from FIPS 197 """

    def test_ff_add(self):
        self.assertEqual(aes.ff_add(0x57, 0x83), 0xd4)
        self.assertEqual(aes.ff_add(0x57, 0x83), 0x57 ^ 0x83)

    def test_xtime(self):
        self.assertEqual(aes.xtime(0x7f), 0xfe)
        self.assertEqual(aes.xtime(0x7f), 0x7f << 1)
        self.assertEqual(aes.xtime(0xff), 0xe5)
        self.assertEqual(aes.xtime(0xff), ((0xff << 1) ^ 0x1b) & 0b11111111)
        self.assertEqual(aes.xtime(0x57), 0xae)
        self.assertEqual(aes.xtime(0xae), 0x47)
        self.assertEqual(aes.xtime(0x47), 0x8e)
        self.assertEqual(aes.xtime(0x8e), 0x07)

    def test_ff_multiply(self):
        self.assertEqual(aes.ff_multiply(0x57, 0x83), 0xc1)
        self.assertEqual(aes.ff_multiply(0x57, 0x13), 0xfe)


class TestExpansion(unittest.TestCase):
    """ Test cases from pp. 27 of FIPS 197 """

    def test_sub_word(self):
        self.assertEqual(aes.sub_word(0xcf4f3c09), 0x8a84eb01)
        self.assertEqual(aes.sub_word(0x6c76052a), 0x50386be5)
        self.assertEqual(aes.sub_word(0x59f67f73), 0xcb42d28f)
        self.assertEqual(aes.sub_word(0x7a883b6d), 0xdac4e23c)
        self.assertEqual(aes.sub_word(0x0bad00db), 0x2b9563b9)
        self.assertEqual(aes.sub_word(0xf915bc11), 0x99596582)
        self.assertEqual(aes.sub_word(0x00102030), 0x63cab704)
        self.assertEqual(aes.sub_word(0x40506070), 0x0953d051)
        self.assertEqual(aes.sub_word(0x8090a0b0), 0xcd60e0e7)
        self.assertEqual(aes.sub_word(0xc0d0e0f0), 0xba70e18c)

    def test_rot_word(self):
        self.assertEqual(aes.rot_word(0x09cf4f3c), 0xcf4f3c09)
        self.assertEqual(aes.rot_word(0x2a6c7605), 0x6c76052a)
        self.assertEqual(aes.rot_word(0x7359f67f), 0x59f67f73)
        self.assertEqual(aes.rot_word(0x6d7a883b), 0x7a883b6d)
        self.assertEqual(aes.rot_word(0xdb0bad00), 0x0bad00db)
        self.assertEqual(aes.rot_word(0x11f915bc), 0xf915bc11)

    def test_key_expansion(self):
        # 128-bit key
        key_bytes = aes.text_to_bytes('2b7e151628aed2a6abf7158809cf4f3c')
        w = aes.key_expansion(key_bytes, Nb=4, Nr=10, Nk=4)
        self.assertEqual(w, [0x2b7e1516, 0x28aed2a6, 0xabf71588, 0x09cf4f3c, 0xa0fafe17, 0x88542cb1, 0x23a33939, 0x2a6c7605, 0xf2c295f2, 0x7a96b943,
                             0x5935807a, 0x7359f67f, 0x3d80477d, 0x4716fe3e, 0x1e237e44, 0x6d7a883b, 0xef44a541, 0xa8525b7f, 0xb671253b, 0xdb0bad00, 0xd4d1c6f8,
                             0x7c839d87, 0xcaf2b8bc, 0x11f915bc, 0x6d88a37a, 0x110b3efd, 0xdbf98641, 0xca0093fd, 0x4e54f70e, 0x5f5fc9f3, 0x84a64fb2, 0x4ea6dc4f,
                             0xead27321, 0xb58dbad2, 0x312bf560, 0x7f8d292f, 0xac7766f3, 0x19fadc21, 0x28d12941, 0x575c006e, 0xd014f9a8, 0xc9ee2589, 0xe13f0cc8, 0xb6630ca6])

        # 192-bit key
        key_bytes = aes.text_to_bytes(
            '8e73b0f7da0e6452c810f32b809079e562f8ead2522c6b7b')
        w = aes.key_expansion(key_bytes, Nb=4, Nr=12, Nk=6)
        self.assertEqual(w, [0x8e73b0f7, 0xda0e6452, 0xc810f32b, 0x809079e5, 0x62f8ead2, 0x522c6b7b, 0xfe0c91f7, 0x2402f5a5, 0xec12068e, 0x6c827f6b,
                             0x0e7a95b9, 0x5c56fec2, 0x4db7b4bd, 0x69b54118, 0x85a74796, 0xe92538fd, 0xe75fad44, 0xbb095386, 0x485af057, 0x21efb14f,
                             0xa448f6d9, 0x4d6dce24, 0xaa326360, 0x113b30e6, 0xa25e7ed5, 0x83b1cf9a, 0x27f93943, 0x6a94f767, 0xc0a69407, 0xd19da4e1,
                             0xec1786eb, 0x6fa64971, 0x485f7032, 0x22cb8755, 0xe26d1352, 0x33f0b7b3, 0x40beeb28, 0x2f18a259, 0x6747d26b, 0x458c553e,
                             0xa7e1466c, 0x9411f1df, 0x821f750a, 0xad07d753, 0xca400538, 0x8fcc5006, 0x282d166a, 0xbc3ce7b5, 0xe98ba06f, 0x448c773c,
                             0x8ecc7204, 0x01002202])

        # 256-bit key
        key_bytes = aes.text_to_bytes(
            '603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4')
        w = aes.key_expansion(key_bytes, Nb=4, Nr=14, Nk=8)
        self.assertEqual(w, [0x603deb10, 0x15ca71be, 0x2b73aef0, 0x857d7781, 0x1f352c07, 0x3b6108d7, 0x2d9810a3, 0x0914dff4, 0x9ba35411, 0x8e6925af,
                             0xa51a8b5f, 0x2067fcde, 0xa8b09c1a, 0x93d194cd, 0xbe49846e, 0xb75d5b9a, 0xd59aecb8, 0x5bf3c917, 0xfee94248, 0xde8ebe96,
                             0xb5a9328a, 0x2678a647, 0x98312229, 0x2f6c79b3, 0x812c81ad, 0xdadf48ba, 0x24360af2, 0xfab8b464, 0x98c5bfc9, 0xbebd198e,
                             0x268c3ba7, 0x09e04214, 0x68007bac, 0xb2df3316, 0x96e939e4, 0x6c518d80, 0xc814e204, 0x76a9fb8a, 0x5025c02d, 0x59c58239,
                             0xde136967, 0x6ccc5a71, 0xfa256395, 0x9674ee15, 0x5886ca5d, 0x2e2f31d7, 0x7e0af1fa, 0x27cf73c3, 0x749c47ab, 0x18501dda,
                             0xe2757e4f, 0x7401905a, 0xcafaaae3, 0xe4d59b34, 0x9adf6ace, 0xbd10190d, 0xfe4890d1, 0xe6188d0b, 0x046df344, 0x706c631e])


class TestUtilities(unittest.TestCase):

    def test_text_to_bytes(self):
        bytes = [50, 67, 246, 168, 136, 90, 48,
                 141, 49, 49, 152, 162, 224, 55, 7, 52]
        self.assertEqual(bytes, aes.text_to_bytes(
            '3243f6a8885a308d313198a2e0370734'))

    def test_text_to_matrix(self):
        matrix = aes.text_to_matrix('3243f6a8885a308d313198a2e0370734')
        self.assertEqual(matrix, [[0x32, 0x88, 0x31, 0xe0],
                                  [0x43, 0x5a, 0x31, 0x37],
                                  [0xf6, 0x30, 0x98, 0x07],
                                  [0xa8, 0x8d, 0xa2, 0x34]])

        matrix = aes.text_to_matrix('193de3bea0f4e22b9ac68d2ae9f84808')
        self.assertEqual(matrix, [[0x19, 0xa0, 0x9a, 0xe9],
                                  [0x3d, 0xf4, 0xc6, 0xf8],
                                  [0xe3, 0xe2, 0x8d, 0x48],
                                  [0xbe, 0x2b, 0x2a, 0x08]])

    def test_matrix_to_text(self):
        matrix = [[0x32, 0x88, 0x31, 0xe0],
                  [0x43, 0x5a, 0x31, 0x37],
                  [0xf6, 0x30, 0x98, 0x07],
                  [0xa8, 0x8d, 0xa2, 0x34]]
        self.assertEqual(aes.matrix_to_text(matrix),
                         '3243f6a8885a308d313198a2e0370734')

        matrix = [[0x19, 0xa0, 0x9a, 0xe9],
                  [0x3d, 0xf4, 0xc6, 0xf8],
                  [0xe3, 0xe2, 0x8d, 0x48],
                  [0xbe, 0x2b, 0x2a, 0x08]]
        self.assertEqual(aes.matrix_to_text(matrix),
                         '193de3bea0f4e22b9ac68d2ae9f84808')


if __name__ == "__main__":
    unittest.main()
